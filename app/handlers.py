from aiogram import Router, types
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.keyboards import (
    get_disciplines_keyboard, 
    get_tests_keyboard, 
    get_questions_keyboard, 
    get_answers_keyboard,
    get_answer_selection_keyboard
)
# from app.keyboardsforAttempt import get_disciplines_keyboard_for_attempt
from app.storage import storage
import aiohttp
import json
router = Router()

@router.message(Command(commands=["start"]))
async def start_command(message: Message):
    user_id = message.from_user.id
    storage.initialize_user(user_id)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /login",
    )

@router.message(Command(commands=["create"]))
async def create_command(message: Message):
    user_id = message.from_user.id
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é:",
        reply_markup=get_disciplines_keyboard(user_id)
    )

@router.message(Command(commands=["help"]))
async def help_command(message: types.Message):
    help_text = (
        "ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n"
        "‚ñ∂Ô∏è `/start` - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "üîë `/login` - –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞\n"
        "üìö `/create` - –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω (–¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)\n"
        "üî¢ `/code <–∫–æ–¥>` - –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )

    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞", callback_data="start"))
    builder.add(types.InlineKeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data="login"))
    builder.add(types.InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É", callback_data="create"))
    builder.adjust(2)  # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ

    await message.answer(help_text, parse_mode="Markdown", reply_markup=builder.as_markup())
    
@router.message(Command(commands=["code"]))
async def process_code_input(message: Message):
    chat_id = message.chat.id
    code = message.text.split()[1]  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 6 —Ü–∏—Ñ—Ä
    if not code.isdigit() or len(code) != 6:
        await message.answer("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Ü–∏—Ñ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –µ—â–µ —Ä–∞–∑.")
        return

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é code_auth —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –∫–æ–¥–æ–º
    status_auth = f"http://localhost/botTelegramLogic/codeinput?chat_id={chat_id}&code={code}"

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(status_auth) as response:
                if response.status == 200:
                    try:
                        json_response = await response.json()
                        auth_state = json_response.get("auth")
                        if auth_state == "success":
                            print(f"auth state: {auth_state}")
                            await message.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –≤—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ")
                        else:
                            await message.answer("–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞")
                            print("–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å auth_state")
                    except ValueError:
                        print("–û—à–∏–±–∫–∞: –æ—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON.")
                else:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –°—Ç–∞—Ç—É—Å: {response.status}")

        except aiohttp.ClientError as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

@router.callback_query()
async def callback_handler(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data.split(":")
    action = data[0]

    if action == "discipline":
        discipline = data[1]
        storage.set_current_discipline(user_id, discipline)
        await callback_query.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É: {discipline}. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:",
            reply_markup=get_tests_keyboard(user_id, discipline)
        )
    elif action == "edit_discipline":
        storage.set_user_state(user_id, "waiting_for_discipline_to_edit")
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è:",
            reply_markup=get_disciplines_keyboard(user_id, edit_mode=True)
        )
    elif action == "select_discipline_to_edit":
        discipline = data[1]
        storage.set_user_state(user_id, f"waiting_for_new_discipline_name:{discipline}")
        await callback_query.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É '{discipline}'. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:"
        )

    elif action == "test":
        test = data[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
        storage.set_current_test(user_id, test)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç
        print(f"DEBUG: –¢–µ–∫—É—â–∏–π —Ç–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {test}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ—Å—Ç: {test}. –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:",
            reply_markup=get_questions_keyboard(user_id, test)
        )
    elif action == "create_question":
        current_test = storage.get_current_test(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç
        print(f"DEBUG: –¢–µ–∫—É—â–∏–π —Ç–µ—Å—Ç: {current_test}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        if current_test:
            question_count = len(storage.get_questions(user_id, current_test)) + 1  # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
            storage.set_user_state(user_id, "waiting_for_question_text")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await callback_query.message.edit_text(
                f"–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å {question_count} –¥–ª—è —Ç–µ—Å—Ç–∞ {current_test}."
            )
        else:
            print("DEBUG: –¢–µ–∫—É—â–∏–π —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç!", show_alert=True)
    elif action == "create_discipline":
        storage.set_user_state(user_id, "waiting_for_discipline_name")
        await callback_query.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:")
    elif action == "create_test":    
        storage.set_user_state(user_id, "waiting_for_test_name")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await callback_query.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞:")
    await callback_query.answer()  # –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback_query


@router.message()
async def text_handler(message: Message):
    user_id = message.from_user.id
    state = storage.get_user_state(user_id)

    state = storage.get_user_state(user_id)
    if state is None:
        await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    if state == "waiting_for_discipline_name":
        discipline_name = message.text.strip()
        storage.add_discipline(user_id, discipline_name)
        await message.answer(
            f"–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ '{discipline_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –µ–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é:",
            reply_markup=get_disciplines_keyboard(user_id)
        )
        storage.clear_user_state(user_id)
    elif state.startswith("waiting_for_new_discipline_name:"):
        old_discipline = state.split(":")[1]
        new_discipline_name = message.text.strip()
        storage.rename_discipline(user_id, old_discipline, new_discipline_name)
        await message.answer(
            f"–ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã '{old_discipline}' –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_discipline_name}'.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º", callback_data="go_to_disciplines")]
            ])
        )
        storage.clear_user_state(user_id)
    elif state == "waiting_for_test_name":
        test_name = message.text.strip()
        discipline = storage.get_current_discipline(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É
        print(f"–¢–µ–∫—É—â–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {discipline}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if discipline:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
            storage.add_test(user_id, discipline, test_name)  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç
            await message.answer(
                f"–¢–µ—Å—Ç '{test_name}' –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã '{discipline}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:",
                reply_markup=get_tests_keyboard(user_id, discipline)
            )
            storage.clear_user_state(user_id)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        else:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.")
    elif state == "waiting_for_question_text":
        test = storage.get_current_test(user_id)
        question_text = message.text.strip()
        storage.add_question(user_id, test, question_text)
        storage.set_user_state(user_id, "waiting_for_answer_count")
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ '{question_text}'."
        )

    elif state == "waiting_for_answer_count":
        try:
            answer_count = int(message.text.strip())
            storage.set_answer_count(user_id, answer_count)  # –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –≤ Storage
            storage.set_user_state(user_id, f"waiting_for_answer_text:1:{answer_count}")
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç 1.")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

    elif state.startswith("waiting_for_answer_text:"):
        _, current, total = state.split(":")
        current = int(current)
        total = int(total)
        answer_text = message.text.strip()
        storage.add_answer(user_id, answer_text)  # –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –≤ Storage

        if current < total:
            storage.set_user_state(user_id, f"waiting_for_answer_text:{current + 1}:{total}")
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç {current + 1}.")
        else:
            storage.set_user_state(user_id, "waiting_for_correct_answer")
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ:",
                reply_markup=get_answer_selection_keyboard(user_id)
            )

    elif state == "waiting_for_correct_answer":
        correct_answer = message.text.strip()
        answers = storage.get_answers(user_id)
        
        if correct_answer in answers:
            storage.set_correct_answer(user_id, correct_answer)
            test = storage.get_current_test(user_id)
            await message.answer(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç '{correct_answer}'.",
                reply_markup=go_to_questions_keyboard(user_id, test)
            )
            # –ù–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é, —Ç–æ–ª—å–∫–æ —É–¥–∞–ª—è–µ–º –∫–ª—é—á 'state'
            if user_id in storage.user_states:
                storage.user_states[user_id].pop('state', None)
        else:
            await message.answer(
                f"–û—Ç–≤–µ—Ç '{correct_answer}' –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç."
            )
    elif action.startswith("set_correct_answer:"):
        correct_answer = action.split(":")[1]
        storage.set_correct_answer(user_id, correct_answer)  # –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –≤ Storage
        test = storage.get_current_test(user_id)
        await callback_query.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç '{correct_answer}'.",
            reply_markup=go_to_questions_keyboard(user_id, test)
        )
        storage.clear_user_state(user_id)

